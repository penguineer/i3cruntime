Der Protokoll-Stack ist an das OSI-Modell angelehnt. Wir haben
drei Schichten:

        +-------------------------+
        | Application (App)       |
        +-------------------------+
        | Communication Handler   |
        +-------------------------+
        | I³C Bus                 |
        | (I²C-Bus + INT-Leitung) |
        +-------------------------+


Die Ebene des Communication Handlers definiert sich wie folgt:

Datenpakete
==========

Datenpakete dienen der Übertragung von Opcodes und Daten und können in
Frames zusammengefasst werden. Ein Datenpaket besteht aus 2 Bytes zu je
8 Bit und hat folgenden Aufbau:

+--------------+---------------+
| Payload      | PC | ST | CRC |
+--------------+---------------+

 Payload: 8 Bits Opcode oder Daten
 PC:      1 Bit
 ST:      2 Bits
 CRC:     5 Bits

 * PC ist ein Packet Counter im aktuellen Frame, der bei jedem Paket
   negiert wird.
   Er beinhaltet initial den Wert '0', wenn es keine Parameter-Pakete gibt,
   ansonsten den Wert '1'.
 * ST ist ein Status und ist als Zahl kodiert. Damit ergeben sich die
   Zustände:
    0) ACK (alles ist OK)
    1) START (nur Master)
	leitet einen neuen Frame ein
    2) FIN (Master und Slave)
        Wird gesetzt, wenn die Parameter (vom Master zum Slave) oder die
        Antwort (vom Slave zum Master) vollständig gesetzt ist.
    3) ERROR (Es kam zu einem Problem bei der Datenübertragung. Das Daten-Byte
             enthält einen detaillierten Fehlerstatus siehe ERROR-Status-Byte
 * CRC ist eine 5-bittige Checksumme über 24 bit, wobei die CRC-Bit bei
       der Berechnung auf 000 gesetzt werden. Die 24 Bit bestehen aus:

	der 7-bit-I2C-Adresse mit angehängter '0' als Padding
	der Payload
	dem Header

       Das Generatorpolynom ist 0x12 gemäß http://users.ece.cmu.edu/~koopman/crc/.

Wenn ST=1 ist, enthält das Daten-Byte ein 8-Bit Command.
 
 
Aufbau des ERROR-Byte
---------------------

0 - Abort        - Abbruch der Kommunikation, Verwerfen des aktuellen
                   Frames
1 - CRC Fehler   - das letzte Paket wird erneut verschickt
2 - FRAME-ERROR  - Der Frame wird aufgrund von Paketverlust verworfen, 
		   Der Master startet die Übertragung des Frames erneut.
3 - OPCODE-ERROR - Der OPCode wurde nicht erkannt
4 - FIFO Overrun - Der Befehlspuffer im Slave ist noch belegt, derzeit können
                   keine Pakete empfangen werden.

Aufbau des Status-Byte
---------------------

0 - ACK		- alles ist ok
1 - DATA	- es liegen weitere Daten vor
2 - BACKOFF	- Slave ist belegt, derzeit können keine Pakete
                  empfangen oder verarbeitet werden


Struktur eines Frames:
======================

Ein Frame besteht aus drei Teilen:
  1) Start-Paket mit dem OpCode
  2) 1-8 Parameter-Pakete vom Master zum Slave
  3) 1-8 Antwort-Pakete vom Slave zum Master

           +--------------+--------------+
Paket  1   | OPCode       | 1 | 01 | CRC | OpCode    Master -> Slave
           +--------------+--------------+
Paket  2   | Parameter 1  | 0 | 00 | CRC | Parameter Master -> Slave
           +--------------+--------------+
Paket  3   | Parameter 2  | 1 | 00 | CRC |
           +--------------+--------------+
Paket  4   | Parameter 3  | 0 | 00 | CRC |
           +--------------+--------------+
Paket  5   | Parameter 4  | 1 | 00 | CRC |
           +--------------+--------------+
Paket  6   | Parameter 5  | 0 | 00 | CRC |
           +--------------+--------------+
Paket  7   | Parameter 6  | 1 | 00 | CRC |
           +--------------+--------------+
Paket  8   | Parameter 7  | 0 | 00 | CRC |
           +--------------+--------------+
Paket  9   | Parameter 8  | 1 | 10 | CRC |
           +--------------+--------------+
Paket 10   | Antwort 1    | 0 | 00 | CRC | Antwort Master -> Slave
           +--------------+--------------+
Paket 11   | Antwort 2    | 1 | 00 | CRC |
           +--------------+--------------+
Paket 12   | Antwort 3    | 0 | 00 | CRC |
           +--------------+--------------+
Paket 13   | Antwort 4    | 1 | 00 | CRC |
           +--------------+--------------+
Paket 14   | Antwort 5    | 0 | 00 | CRC |
           +--------------+--------------+
Paket 15   | Antwort 6    | 1 | 00 | CRC |
           +--------------+--------------+
Paket 16   | Antwort 7    | 0 | 00 | CRC |
           +--------------+--------------+
Paket 17   | Antwort 8    | 1 | 10 | CRC |
           +--------------+--------------+

Die Anzahl der Parameter- und Antwort-Pakete kann variieren. Das letzte Paket
wird jeweils mit dem FIN-Status markiert. Dabei ist es möglich, keine Parameter
zu schicken (PC='0' im Start-Paket) und nur ein Antwort-Paket zu schicken
(ST == 2 im ersten Antwort-Paket).

Auch wenn eigentlich keine Antwort notwendig ist, muss auf jeden Fall der
ACK-Teil des Pakets vom Slave zum Master gesendet werden. Ggf. wertet die App
die Payload nicht aus.


Das letzte Daten-Paket (vom Slave um Master) wird bei erfolgreicher
Übertragung nicht mit einem Management-Paket quittiert. Der Slave muss
deshalb das letzte Daten-Paket so lange vorhalten, bis der Master einen
neuen Frame an diesen Slave initiiert. (D.h. ein Start-Paket senden.
Ggf. kann vorher ein Management-Paket mit der Resend-Anweisung versendet
werden.)


Interrupt-Mitteilung (INT)
==========================

Über den Interrupt kann ein Slave mitteilen, dass eine Status-Änderung vorliegt,
die vom Master entgegen genommen werden sollte.

Ein Slave im Interrupt-Status hält die INT-Leitung aktiv und setzt den
INT-Status in seinen Datenpaketen. Mit Abfrage des Status durch den Master
wird der Interrupt-Status verlassen.

Der Master kann auf diese Art bei aktiver Interrupt-Leitung der Reihe nach den
Status der Slaves abfragen und damit feststellen, welcher Slave Statusänderungen
kommunizieren möchte. Alle weiteren Aktivitäten werden durch die App auf der
Master-Seite entschieden.

Die Abfrage des Status ist ein Standard-OpCode.

Verhalten
=========

* Jedes Paket wird vom Empfänger anhand der CRC geprüft und mit Hilfe
  eines Management-Pakets quittiert. Der Master reagiert entsprechend
  der Übertragungserfolgsnachricht.
* Das letzte Daten-Paket (vom Slave um Master) wird bei erfolgreicher
  Übertragung nicht mit einem Management-Paket quittiert. Der Slave muss
  deshalb das letzte Daten-Paket so lange vorhalten, bis der Master einen neuen
  Frame initiiert.
* Frames werden auf dem Bus nicht fragmentiert, d.h. in der Zeit zwischen
  Anfrage vom Master und Antwort vom Slave kann der Bus nicht benutzt werden.
  Antworten müssen deshalb so schnell wie möglich gesendet werden.

Ablauf der Kommunikation
========================
Darstellung der Kommunikation zur Statusabfrage mit anschließendem Lesen von
Daten.

t
|  Master                                Client
|  =================================     =================================
|
|  +--------------+-------------+
|  |       2      | 0 | 1 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|                                         |   STATUS     | 0 | 1 | CRC |
|                                         +--------------+-------------+
|  Die Status-Abfrage war erfolgreich. Der Master fragt die vorliegenden
|  Daten an
|  +--------------+-------------+
|  |      17      | 1 | 1 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|                                         |   00000000   | 1 | 0 | CRC |
|                                         +--------------+-------------+
|  +--------------+-------------+
|  | parameter 1  | 0 | 0 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|                                         |   00000000   | 0 | 0 | CRC |
|                                         +--------------+-------------+
|  +--------------+-------------+
|  | parameter 2  | 1 | 2 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|                                         |   00000000   | 1 | 2 | CRC |
|                                         +--------------+-------------+
|
TODO: wollen wir in den Antwortpaketen den ursprünglichen Parameter
mitschicken? Wir haben bis dato noch keinen Anwendungsfall für diesen
Datenbereich und es gäbe dem Master eine definitive Quittung des
korrekten Empfangs des Pakets.
|
|  An dieser Stelle tritt eine Störung des i²C-Bus auf. Die CRC-Berechnung 
|  kommt nach der Übermittlung master-seitig nicht zum selben Ergebnis. Der
|  Master überträgt erneut.
|  +--------------+-------------+
|  |   ERROR: 1   | 0 | 3 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|                                         |   00000000   | 0 | 0 | CRC |
|                                         +--------------+-------------+
|  +--------------+-------------+
|  | parameter 2  | 1 | 2 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|                                         |   00000000   | 1 | 2 | CRC |
|                                         +--------------+-------------+
|  
|   An dieser Stelle ist das Kommando an den Slave übertragen. Der
|   Server initiiert den Antwort-Teil des Frames.
|  +--------------+-------------+
|  |   00000000   | 0 |  0 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|                                         |  DATADATA    | 0 | 0 | CRC |
|                                         +--------------+-------------+
|  +--------------+-------------+
|  |   00000000   | 1 | 0 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|                                         |  DATADATA    | 1 | 0 | CRC |
|                                         +--------------+-------------+
|  +--------------+-------------+
|  |   00000000   | 0 | 0 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|                                         |  DATADATA    | 0 | 0 | CRC |
|                                         +--------------+-------------+
|  +--------------+-------------+
|  |   00000000   | 1 | 0 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|                                         |  DATADATA    | 1 | 0 | CRC |
|                                         +--------------+-------------+
|  +--------------+-------------+
|  |   00000000   | 0 | 0 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|                                         |  DATADATA    | 0 | 0 | CRC |
|                                         +--------------+-------------+
|  +--------------+-------------+
|  |   00000000   | 1 | 0 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|                                         |  DATADATA    | 1 | 0 | CRC |
|                                         +--------------+-------------+
|  +--------------+-------------+
|  |   00000000   | 0 | 0 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|                                         |  DATADATA    | 0 | 0 | CRC |
|                                         +--------------+-------------+
|  +--------------+-------------+
|  |   00000000   | 1 | 0 | CRC |
|  +--------------+-------------+
|  An dieser Stelle tritt ein Fehler der CRC-Prüfung slave-seitig auf. Der
|  Slave kommuniziert das per ERROR-Byte, der Master überträgt erneut,
|  Kommunikation geht weiter.
|                                         +--------------+-------------+
|                                         |   ERROR: 1   | 3 | 0 | CRC |
|                                         +--------------+-------------+
|  +--------------+--------------+
|  |   00000000   | 1 |  0 | CRC |
|  +--------------+--------------+
|                                         +--------------+-------------+
|                                         |  DATADATA    | 1 | 0 | CRC |
|                                         +--------------+-------------+
|  Nach einer erneute Statusabfrage oder nach einem neuen Start-Paket 
|  darf der Client das Daten-Byte freigeben.
|  +--------------+-------------+
|  |       2      | 0 | 2 | CRC |
|  +--------------+-------------+
|                                         +--------------+-------------+
|  				          |   STATUS     | 0 | 0 | CRC |
|                                         +--------------+-------------+
|
|
v

OPCodes
=======

1 Reset bewirkt einen Reboot des Clients.
2 Statusabfrage Mit Daten über den Application Status
3 Register lesen
4 Register schreiben
5 Firmware-Update Management (mit Sub-Kommando etc im Frame)
6 Firmware-Update Daten
7-15 RESERVIERT
16-255 Applikationsspezifisch
